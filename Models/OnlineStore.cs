// Licence file C:\Users\Archie Garg\Documents\ReversePOCO.txt not found.
// Please obtain your licence file at www.ReversePOCO.co.uk, and place it in your documents folder shown above.
// Defaulting to Trial version.
// <auto-generated>
// ReSharper disable All

using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Query;
using Microsoft.EntityFrameworkCore.Query.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlTypes;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

namespace Models
{
    #region Database context interface

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public interface IOnlineStore : IDisposable
    {
        DbSet<Category> Categories { get; set; } // Categories
        DbSet<Ethnicity> Ethnicities { get; set; } // Ethnicities
        DbSet<Gender> Genders { get; set; } // Genders
        DbSet<Item> Items { get; set; } // Items
        DbSet<ItemCharacteristic> ItemCharacteristics { get; set; } // ItemCharacteristic
        DbSet<Permission> Permissions { get; set; } // Permissions
        DbSet<Role> Roles { get; set; } // Roles
        DbSet<User> Users { get; set; } // user

        int SaveChanges();
        int SaveChanges(bool acceptAllChangesOnSuccess);
        Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken));
        Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken));
        DatabaseFacade Database { get; }
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        EntityEntry Add(object entity);
        EntityEntry<TEntity> Add<TEntity>(TEntity entity) where TEntity : class;
        Task AddRangeAsync(params object[] entities);
        Task AddRangeAsync(IEnumerable<object> entities, CancellationToken cancellationToken = default);
        ValueTask<EntityEntry<TEntity>> AddAsync<TEntity>(TEntity entity, CancellationToken cancellationToken = default) where TEntity : class;
        ValueTask<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken = default);
        void AddRange(IEnumerable<object> entities);
        void AddRange(params object[] entities);

        EntityEntry Attach(object entity);
        EntityEntry<TEntity> Attach<TEntity>(TEntity entity) where TEntity : class;
        void AttachRange(IEnumerable<object> entities);
        void AttachRange(params object[] entities);

        EntityEntry Entry(object entity);
        EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;

        TEntity Find<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(object[] keyValues, CancellationToken cancellationToken) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<object> FindAsync(Type entityType, object[] keyValues, CancellationToken cancellationToken);
        ValueTask<object> FindAsync(Type entityType, params object[] keyValues);
        object Find(Type entityType, params object[] keyValues);

        EntityEntry Remove(object entity);
        EntityEntry<TEntity> Remove<TEntity>(TEntity entity) where TEntity : class;
        void RemoveRange(IEnumerable<object> entities);
        void RemoveRange(params object[] entities);

        EntityEntry Update(object entity);
        EntityEntry<TEntity> Update<TEntity>(TEntity entity) where TEntity : class;
        void UpdateRange(IEnumerable<object> entities);
        void UpdateRange(params object[] entities);

        IQueryable<TResult> FromExpression<TResult> (Expression<Func<IQueryable<TResult>>> expression);

        // Stored Procedures
        int OsSpAddItem(string name, string pictureLocation, int? price, int? quantity, string supplier, string width, string height, string category, string color, string description, string notes);
        // OsSpAddItemAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int OsSpAddUser(string firstName, string lastName, string email, string lastLogin, string password, string address, int? age, string emailVerified, string role, string sex, string ethnicity);
        // OsSpAddUserAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<OsSpGetItemsReturnModel> OsSpGetItems();
        List<OsSpGetItemsReturnModel> OsSpGetItems(out int procResult);
        Task<List<OsSpGetItemsReturnModel>> OsSpGetItemsAsync();

        List<OsSpGetUserReturnModel> OsSpGetUser(string email, string password);
        List<OsSpGetUserReturnModel> OsSpGetUser(string email, string password, out int procResult);
        Task<List<OsSpGetUserReturnModel>> OsSpGetUserAsync(string email, string password);

        int OsSpUpdateUser(string firstName, string lastName, string email, string lastLogin, string password, string address, int? age, string emailVerified, string role, string sex, string ethnicity);
        // OsSpUpdateUserAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

    }

    #endregion

    #region Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class OnlineStore : DbContext, IOnlineStore
    {
        public OnlineStore()
        {
        }

        public OnlineStore(DbContextOptions<OnlineStore> options)
            : base(options)
        {
        }

        public DbSet<Category> Categories { get; set; } // Categories
        public DbSet<Ethnicity> Ethnicities { get; set; } // Ethnicities
        public DbSet<Gender> Genders { get; set; } // Genders
        public DbSet<Item> Items { get; set; } // Items
        public DbSet<ItemCharacteristic> ItemCharacteristics { get; set; } // ItemCharacteristic
        public DbSet<Permission> Permissions { get; set; } // Permissions
        public DbSet<Role> Roles { get; set; } // Roles
        public DbSet<User> Users { get; set; } // user

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(@"Data Source=localhost;Initial Catalog='Online Store';Integrated Security=True");
            }
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfiguration(new CategoryConfiguration());
            modelBuilder.ApplyConfiguration(new EthnicityConfiguration());
            modelBuilder.ApplyConfiguration(new GenderConfiguration());
            modelBuilder.ApplyConfiguration(new ItemConfiguration());
            modelBuilder.ApplyConfiguration(new ItemCharacteristicConfiguration());
            modelBuilder.ApplyConfiguration(new PermissionConfiguration());
            modelBuilder.ApplyConfiguration(new RoleConfiguration());
            modelBuilder.ApplyConfiguration(new UserConfiguration());

            modelBuilder.Entity<OsSpGetItemsReturnModel>().HasNoKey();
            modelBuilder.Entity<OsSpGetUserReturnModel>().HasNoKey();
        }


        // Stored Procedures
        public int OsSpAddItem(string name, string pictureLocation, int? price, int? quantity, string supplier, string width, string height, string category, string color, string description, string notes)
        {
            var nameParam = new SqlParameter { ParameterName = "@name", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = name, Size = -1 };
            if (nameParam.Value == null)
                nameParam.Value = DBNull.Value;

            var pictureLocationParam = new SqlParameter { ParameterName = "@pictureLocation", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = pictureLocation, Size = -1 };
            if (pictureLocationParam.Value == null)
                pictureLocationParam.Value = DBNull.Value;

            var priceParam = new SqlParameter { ParameterName = "@price", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = price.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!price.HasValue)
                priceParam.Value = DBNull.Value;

            var quantityParam = new SqlParameter { ParameterName = "@quantity", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = quantity.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!quantity.HasValue)
                quantityParam.Value = DBNull.Value;

            var supplierParam = new SqlParameter { ParameterName = "@supplier", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = supplier, Size = -1 };
            if (supplierParam.Value == null)
                supplierParam.Value = DBNull.Value;

            var widthParam = new SqlParameter { ParameterName = "@width", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = width, Size = -1 };
            if (widthParam.Value == null)
                widthParam.Value = DBNull.Value;

            var heightParam = new SqlParameter { ParameterName = "@height", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = height, Size = -1 };
            if (heightParam.Value == null)
                heightParam.Value = DBNull.Value;

            var categoryParam = new SqlParameter { ParameterName = "@category", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = category, Size = -1 };
            if (categoryParam.Value == null)
                categoryParam.Value = DBNull.Value;

            var colorParam = new SqlParameter { ParameterName = "@color", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = color, Size = -1 };
            if (colorParam.Value == null)
                colorParam.Value = DBNull.Value;

            var descriptionParam = new SqlParameter { ParameterName = "@description", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = description, Size = -1 };
            if (descriptionParam.Value == null)
                descriptionParam.Value = DBNull.Value;

            var notesParam = new SqlParameter { ParameterName = "@notes", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = notes, Size = -1 };
            if (notesParam.Value == null)
                notesParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[os_sp_addItem] @name, @pictureLocation, @price, @quantity, @supplier, @width, @height, @category, @color, @description, @notes", nameParam, pictureLocationParam, priceParam, quantityParam, supplierParam, widthParam, heightParam, categoryParam, colorParam, descriptionParam, notesParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // OsSpAddItemAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int OsSpAddUser(string firstName, string lastName, string email, string lastLogin, string password, string address, int? age, string emailVerified, string role, string sex, string ethnicity)
        {
            var firstNameParam = new SqlParameter { ParameterName = "@firstName", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = firstName, Size = -1 };
            if (firstNameParam.Value == null)
                firstNameParam.Value = DBNull.Value;

            var lastNameParam = new SqlParameter { ParameterName = "@lastName", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = lastName, Size = -1 };
            if (lastNameParam.Value == null)
                lastNameParam.Value = DBNull.Value;

            var emailParam = new SqlParameter { ParameterName = "@email", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = email, Size = -1 };
            if (emailParam.Value == null)
                emailParam.Value = DBNull.Value;

            var lastLoginParam = new SqlParameter { ParameterName = "@lastLogin", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = lastLogin, Size = -1 };
            if (lastLoginParam.Value == null)
                lastLoginParam.Value = DBNull.Value;

            var passwordParam = new SqlParameter { ParameterName = "@password", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = password, Size = -1 };
            if (passwordParam.Value == null)
                passwordParam.Value = DBNull.Value;

            var addressParam = new SqlParameter { ParameterName = "@address", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = address, Size = -1 };
            if (addressParam.Value == null)
                addressParam.Value = DBNull.Value;

            var ageParam = new SqlParameter { ParameterName = "@age", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = age.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!age.HasValue)
                ageParam.Value = DBNull.Value;

            var emailVerifiedParam = new SqlParameter { ParameterName = "@emailVerified", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = emailVerified, Size = 5 };
            if (emailVerifiedParam.Value == null)
                emailVerifiedParam.Value = DBNull.Value;

            var roleParam = new SqlParameter { ParameterName = "@Role", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = role, Size = -1 };
            if (roleParam.Value == null)
                roleParam.Value = DBNull.Value;

            var sexParam = new SqlParameter { ParameterName = "@sex", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = sex, Size = -1 };
            if (sexParam.Value == null)
                sexParam.Value = DBNull.Value;

            var ethnicityParam = new SqlParameter { ParameterName = "@ethnicity", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = ethnicity, Size = -1 };
            if (ethnicityParam.Value == null)
                ethnicityParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[os_sp_addUser] @firstName, @lastName, @email, @lastLogin, @password, @address, @age, @emailVerified, @Role, @sex, @ethnicity", firstNameParam, lastNameParam, emailParam, lastLoginParam, passwordParam, addressParam, ageParam, emailVerifiedParam, roleParam, sexParam, ethnicityParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // OsSpAddUserAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<OsSpGetItemsReturnModel> OsSpGetItems()
        {
            int procResult;
            return OsSpGetItems(out procResult);
        }

        public List<OsSpGetItemsReturnModel> OsSpGetItems(out int procResult)
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[os_sp_getItems]";
            var procResultData = Set<OsSpGetItemsReturnModel>()
                .FromSqlRaw(sqlCommand, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<OsSpGetItemsReturnModel>> OsSpGetItemsAsync()
        {
            const string sqlCommand = "EXEC [dbo].[os_sp_getItems]";
            var procResultData = await Set<OsSpGetItemsReturnModel>()
                .FromSqlRaw(sqlCommand)
                .ToListAsync();

            return procResultData;
        }

        public List<OsSpGetUserReturnModel> OsSpGetUser(string email, string password)
        {
            int procResult;
            return OsSpGetUser(email, password, out procResult);
        }

        public List<OsSpGetUserReturnModel> OsSpGetUser(string email, string password, out int procResult)
        {
            var emailParam = new SqlParameter { ParameterName = "@email", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = email, Size = -1 };
            if (emailParam.Value == null)
                emailParam.Value = DBNull.Value;

            var passwordParam = new SqlParameter { ParameterName = "@password", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = password, Size = -1 };
            if (passwordParam.Value == null)
                passwordParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[os_sp_getUser] @email, @password";
            var procResultData = Set<OsSpGetUserReturnModel>()
                .FromSqlRaw(sqlCommand, emailParam, passwordParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<OsSpGetUserReturnModel>> OsSpGetUserAsync(string email, string password)
        {
            var emailParam = new SqlParameter { ParameterName = "@email", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = email, Size = -1 };
            if (emailParam.Value == null)
                emailParam.Value = DBNull.Value;

            var passwordParam = new SqlParameter { ParameterName = "@password", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = password, Size = -1 };
            if (passwordParam.Value == null)
                passwordParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[os_sp_getUser] @email, @password";
            var procResultData = await Set<OsSpGetUserReturnModel>()
                .FromSqlRaw(sqlCommand, emailParam, passwordParam)
                .ToListAsync();

            return procResultData;
        }

        public int OsSpUpdateUser(string firstName, string lastName, string email, string lastLogin, string password, string address, int? age, string emailVerified, string role, string sex, string ethnicity)
        {
            var firstNameParam = new SqlParameter { ParameterName = "@firstName", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = firstName, Size = -1 };
            if (firstNameParam.Value == null)
                firstNameParam.Value = DBNull.Value;

            var lastNameParam = new SqlParameter { ParameterName = "@lastName", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = lastName, Size = -1 };
            if (lastNameParam.Value == null)
                lastNameParam.Value = DBNull.Value;

            var emailParam = new SqlParameter { ParameterName = "@email", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = email, Size = -1 };
            if (emailParam.Value == null)
                emailParam.Value = DBNull.Value;

            var lastLoginParam = new SqlParameter { ParameterName = "@lastLogin", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = lastLogin, Size = -1 };
            if (lastLoginParam.Value == null)
                lastLoginParam.Value = DBNull.Value;

            var passwordParam = new SqlParameter { ParameterName = "@password", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = password, Size = -1 };
            if (passwordParam.Value == null)
                passwordParam.Value = DBNull.Value;

            var addressParam = new SqlParameter { ParameterName = "@address", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = address, Size = -1 };
            if (addressParam.Value == null)
                addressParam.Value = DBNull.Value;

            var ageParam = new SqlParameter { ParameterName = "@age", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = age.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!age.HasValue)
                ageParam.Value = DBNull.Value;

            var emailVerifiedParam = new SqlParameter { ParameterName = "@emailVerified", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = emailVerified, Size = 5 };
            if (emailVerifiedParam.Value == null)
                emailVerifiedParam.Value = DBNull.Value;

            var roleParam = new SqlParameter { ParameterName = "@Role", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = role, Size = -1 };
            if (roleParam.Value == null)
                roleParam.Value = DBNull.Value;

            var sexParam = new SqlParameter { ParameterName = "@sex", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = sex, Size = -1 };
            if (sexParam.Value == null)
                sexParam.Value = DBNull.Value;

            var ethnicityParam = new SqlParameter { ParameterName = "@ethnicity", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = ethnicity, Size = -1 };
            if (ethnicityParam.Value == null)
                ethnicityParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[os_sp_updateUser] @firstName, @lastName, @email, @lastLogin, @password, @address, @age, @emailVerified, @Role, @sex, @ethnicity", firstNameParam, lastNameParam, emailParam, lastLoginParam, passwordParam, addressParam, ageParam, emailVerifiedParam, roleParam, sexParam, ethnicityParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // OsSpUpdateUserAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

    }

    #endregion

    #region Database context factory

    public class OnlineStoreFactory : IDesignTimeDbContextFactory<OnlineStore>
    {
        public OnlineStore CreateDbContext(string[] args)
        {
            return new OnlineStore();
        }
    }

    #endregion

    #region Fake Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class FakeOnlineStore : IOnlineStore
    {
        public DbSet<Category> Categories { get; set; } // Categories
        public DbSet<Ethnicity> Ethnicities { get; set; } // Ethnicities
        public DbSet<Gender> Genders { get; set; } // Genders
        public DbSet<Item> Items { get; set; } // Items
        public DbSet<ItemCharacteristic> ItemCharacteristics { get; set; } // ItemCharacteristic
        public DbSet<Permission> Permissions { get; set; } // Permissions
        public DbSet<Role> Roles { get; set; } // Roles
        public DbSet<User> Users { get; set; } // user

        public FakeOnlineStore()
        {
            _database = new FakeDatabaseFacade(new OnlineStore());

            Categories = new FakeDbSet<Category>("Id");
            Ethnicities = new FakeDbSet<Ethnicity>("Id");
            Genders = new FakeDbSet<Gender>("Id");
            Items = new FakeDbSet<Item>("Id");
            ItemCharacteristics = new FakeDbSet<ItemCharacteristic>("Id");
            Permissions = new FakeDbSet<Permission>("Id");
            Roles = new FakeDbSet<Role>("Id");
            Users = new FakeDbSet<User>("Id");

        }

        public int SaveChangesCount { get; private set; }
        public virtual int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public virtual int SaveChanges(bool acceptAllChangesOnSuccess)
        {
            return SaveChanges();
        }

        public virtual Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }
        public virtual Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(x => 1, acceptAllChangesOnSuccess, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private DatabaseFacade _database;
        public DatabaseFacade Database { get { return _database; } }

        public DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new NotImplementedException();
        }

        public override string ToString()
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Add(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Add<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual Task AddRangeAsync(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual async Task AddRangeAsync(IEnumerable<object> entities, CancellationToken cancellationToken = default)
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual async ValueTask<EntityEntry<TEntity>> AddAsync<TEntity>(TEntity entity, CancellationToken cancellationToken = default) where TEntity : class
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual async ValueTask<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken = default)
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual void AddRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void AddRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Attach(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Attach<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void AttachRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void AttachRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Entry(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual TEntity Find<TEntity>(params object[] keyValues) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<TEntity> FindAsync<TEntity>(object[] keyValues, CancellationToken cancellationToken) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<TEntity> FindAsync<TEntity>(params object[] keyValues) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<object> FindAsync(Type entityType, object[] keyValues, CancellationToken cancellationToken)
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<object> FindAsync(Type entityType, params object[] keyValues)
        {
            throw new NotImplementedException();
        }

        public virtual object Find(Type entityType, params object[] keyValues)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Remove(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Remove<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void RemoveRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void RemoveRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Update(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Update<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void UpdateRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void UpdateRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual IQueryable<TResult> FromExpression<TResult> (Expression<Func<IQueryable<TResult>>> expression)
        {
            throw new NotImplementedException();
        }


        // Stored Procedures

        public int OsSpAddItem(string name, string pictureLocation, int? price, int? quantity, string supplier, string width, string height, string category, string color, string description, string notes)
        {
            return 0;
        }

        // OsSpAddItemAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int OsSpAddUser(string firstName, string lastName, string email, string lastLogin, string password, string address, int? age, string emailVerified, string role, string sex, string ethnicity)
        {
            return 0;
        }

        // OsSpAddUserAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public DbSet<OsSpGetItemsReturnModel> OsSpGetItemsReturnModel { get; set; }
        public List<OsSpGetItemsReturnModel> OsSpGetItems()
        {
            int procResult;
            return OsSpGetItems(out procResult);
        }

        public List<OsSpGetItemsReturnModel> OsSpGetItems(out int procResult)
        {
            procResult = 0;
            return new List<OsSpGetItemsReturnModel>();
        }

        public Task<List<OsSpGetItemsReturnModel>> OsSpGetItemsAsync()
        {
            int procResult;
            return Task.FromResult(OsSpGetItems(out procResult));
        }

        public DbSet<OsSpGetUserReturnModel> OsSpGetUserReturnModel { get; set; }
        public List<OsSpGetUserReturnModel> OsSpGetUser(string email, string password)
        {
            int procResult;
            return OsSpGetUser(email, password, out procResult);
        }

        public List<OsSpGetUserReturnModel> OsSpGetUser(string email, string password, out int procResult)
        {
            procResult = 0;
            return new List<OsSpGetUserReturnModel>();
        }

        public Task<List<OsSpGetUserReturnModel>> OsSpGetUserAsync(string email, string password)
        {
            int procResult;
            return Task.FromResult(OsSpGetUser(email, password, out procResult));
        }

        public int OsSpUpdateUser(string firstName, string lastName, string email, string lastLogin, string password, string address, int? age, string emailVerified, string role, string sex, string ethnicity)
        {
            return 0;
        }

        // OsSpUpdateUserAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)
    }

    #endregion

    #region Fake DbSet

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    public class FakeDbSet<TEntity> :
        DbSet<TEntity>,
        IQueryable<TEntity>,
        IAsyncEnumerable<TEntity>,
        IListSource,
        IResettableService
        where TEntity : class
    {
        private readonly PropertyInfo[] _primaryKeys;
        private ObservableCollection<TEntity> _data;
        private IQueryable _query;
        public override IEntityType EntityType { get; }

        public FakeDbSet()
        {
            _primaryKeys = null;
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override ValueTask<TEntity> FindAsync(object[] keyValues, CancellationToken cancellationToken)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken));
        }

        public override ValueTask<TEntity> FindAsync(params object[] keyValues)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues)));
        }

        public override EntityEntry<TEntity> Add(TEntity entity)
        {
            _data.Add(entity);
            return null;
        }

        public override ValueTask<EntityEntry<TEntity>> AddAsync(TEntity entity, CancellationToken cancellationToken = default)
        {
            return new ValueTask<EntityEntry<TEntity>>(Task<EntityEntry<TEntity>>.Factory.StartNew(() => Add(entity), cancellationToken));
        }

        public override void AddRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities)
                _data.Add(entity);
        }

        public override void AddRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities)
                _data.Add(entity);
        }

        public override Task AddRangeAsync(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            return Task.Factory.StartNew(() => AddRange(entities));
        }

        public override Task AddRangeAsync(IEnumerable<TEntity> entities, CancellationToken cancellationToken = default)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            return Task.Factory.StartNew(() => AddRange(entities), cancellationToken);
        }

        public override EntityEntry<TEntity> Attach(TEntity entity)
        {
            if (entity == null) throw new ArgumentNullException("entity");
            return Add(entity);
        }

        public override void AttachRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            AddRange(entities);
        }

        public override void AttachRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            AddRange(entities);
        }

        public override EntityEntry<TEntity> Remove(TEntity entity)
        {
            _data.Remove(entity);
            return null;
        }

        public override void RemoveRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities.ToList())
                _data.Remove(entity);
        }

        public override void RemoveRange(IEnumerable<TEntity> entities)
        {
            RemoveRange(entities.ToArray());
        }

        public override EntityEntry<TEntity> Update(TEntity entity)
        {
            _data.Remove(entity);
            _data.Add(entity);
            return null;
        }

        public override void UpdateRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            RemoveRange(entities);
            AddRange(entities);
        }

        public override void UpdateRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            var array = entities.ToArray();        RemoveRange(array);
            AddRange(array);
        }

        bool IListSource.ContainsListCollection => true;

        public IList GetList()
        {
            return _data;
        }

        IList IListSource.GetList()
        {
            return _data;
        }

        Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_data); }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        public override IAsyncEnumerator<TEntity> GetAsyncEnumerator(CancellationToken cancellationToken = default)
        {
            return new FakeDbAsyncEnumerator<TEntity>(this.AsEnumerable().GetEnumerator());
        }

        public void ResetState()
        {
            _data  = new ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public Task ResetStateAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.Factory.StartNew(() => ResetState());
        }
    }

    public class FakeDbAsyncQueryProvider<TEntity> : FakeQueryProvider<TEntity>, IAsyncEnumerable<TEntity>, IAsyncQueryProvider
    {
        public FakeDbAsyncQueryProvider(Expression expression) : base(expression)
        {
        }

        public FakeDbAsyncQueryProvider(IEnumerable<TEntity> enumerable) : base(enumerable)
        {
        }

        public TResult ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken)
        {
            var expectedResultType = typeof(TResult).GetGenericArguments()[0];
            var executionResult = typeof(IQueryProvider)
                .GetMethods()
                .First(method => method.Name == nameof(IQueryProvider.Execute) && method.IsGenericMethod)
                .MakeGenericMethod(expectedResultType)
                .Invoke(this, new object[] { expression });

            return (TResult) typeof(Task).GetMethod(nameof(Task.FromResult))
                ?.MakeGenericMethod(expectedResultType)
                .Invoke(null, new[] { executionResult });
        }

        public IAsyncEnumerator<TEntity> GetAsyncEnumerator(CancellationToken cancellationToken = default)
        {
            return new FakeDbAsyncEnumerator<TEntity>(this.AsEnumerable().GetEnumerator());
        }
    }

    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable)
            : base(enumerable)
        {
        }

        public FakeDbAsyncEnumerable(Expression expression)
            : base(expression)
        {
        }

        public IAsyncEnumerator<T> GetAsyncEnumerator(CancellationToken cancellationToken = new CancellationToken())
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        IAsyncEnumerator<T> IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAsyncEnumerator(cancellationToken);
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.AsEnumerable().GetEnumerator();
        }
    }

    public class FakeDbAsyncEnumerator<T> : IAsyncEnumerator<T>
    {
        private readonly IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        public ValueTask<bool> MoveNextAsync()
        {
            return new ValueTask<bool>(_inner.MoveNext());
        }

        public ValueTask DisposeAsync()
        {
            _inner.Dispose();
            return new ValueTask(Task.CompletedTask);
        }
    }

    public abstract class FakeQueryProvider<T> : IOrderedQueryable<T>, IQueryProvider
    {
        private IEnumerable<T> _enumerable;

        protected FakeQueryProvider(Expression expression)
        {
            Expression = expression;
        }

        protected FakeQueryProvider(IEnumerable<T> enumerable)
        {
            _enumerable = enumerable;
            Expression = enumerable.AsQueryable().Expression;
        }

        public IQueryable CreateQuery(Expression expression)
        {
            if (expression is MethodCallExpression m)
            {
                var resultType = m.Method.ReturnType; // it should be IQueryable<T>
                var tElement = resultType.GetGenericArguments().First();
                return (IQueryable) CreateInstance(tElement, expression);
            }

            return CreateQuery<T>(expression);
        }

        public IQueryable<TEntity> CreateQuery<TEntity>(Expression expression)
        {
            return (IQueryable<TEntity>) CreateInstance(typeof(TEntity), expression);
        }

        private object CreateInstance(Type tElement, Expression expression)
        {
            var queryType = GetType().GetGenericTypeDefinition().MakeGenericType(tElement);
            return Activator.CreateInstance(queryType, expression);
        }

        public object Execute(Expression expression)
        {
            return CompileExpressionItem<object>(expression);
        }

        public TResult Execute<TResult>(Expression expression)
        {
            return CompileExpressionItem<TResult>(expression);
        }

        IEnumerator<T> IEnumerable<T>.GetEnumerator()
        {
            if (_enumerable == null) _enumerable = CompileExpressionItem<IEnumerable<T>>(Expression);
            return _enumerable.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            if (_enumerable == null) _enumerable = CompileExpressionItem<IEnumerable<T>>(Expression);
            return _enumerable.GetEnumerator();
        }

        public Type ElementType => typeof(T);

        public Expression Expression { get; }

        public IQueryProvider Provider => this;

        private static TResult CompileExpressionItem<TResult>(Expression expression)
        {
            var visitor = new FakeExpressionVisitor();
            var body = visitor.Visit(expression);
            var f = Expression.Lambda<Func<TResult>>(body ?? throw new InvalidOperationException(string.Format("{0} is null", nameof(body))), (IEnumerable<ParameterExpression>) null);
            return f.Compile()();
        }
    }

    public class FakeExpressionVisitor : ExpressionVisitor
    {
    }

    public class FakeDatabaseFacade : DatabaseFacade
    {
        public FakeDatabaseFacade(DbContext context) : base(context)
        {
        }

        public override bool EnsureCreated()
        {
            return true;
        }

        public override Task<bool> EnsureCreatedAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(EnsureCreated());
        }

        public override bool EnsureDeleted()
        {
            return true;
        }

        public override Task<bool> EnsureDeletedAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(EnsureDeleted());
        }

        public override bool CanConnect()
        {
            return true;
        }

        public override Task<bool> CanConnectAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(CanConnect());
        }

        public override IDbContextTransaction BeginTransaction()
        {
            return new FakeDbContextTransaction();
        }

        public override Task<IDbContextTransaction> BeginTransactionAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(BeginTransaction());
        }

        public override void CommitTransaction()
        {
        }

        public override Task CommitTransactionAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.CompletedTask;
        }

        public override void RollbackTransaction()
        {
        }

        public override Task RollbackTransactionAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.CompletedTask;
        }

        public override IExecutionStrategy CreateExecutionStrategy()
        {
            return null;
        }

        public override string ToString()
        {
            return string.Empty;
        }
    }

    public class FakeDbContextTransaction : IDbContextTransaction
    {
        public Guid TransactionId => Guid.NewGuid();
        public void Commit() { }
        public void Rollback() { }
        public Task CommitAsync(CancellationToken cancellationToken = new CancellationToken()) => Task.CompletedTask;
        public Task RollbackAsync(CancellationToken cancellationToken = new CancellationToken()) => Task.CompletedTask;
        public void Dispose() { }
        public ValueTask DisposeAsync() => default;
    }

    #endregion

    #region POCO classes

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // Categories
    public class Category
    {
        public int Id { get; set; } // id (Primary key)
        public string Name { get; set; } // name (length: 128)

        // Reverse navigation

        /// <summary>
        /// Child ItemCharacteristics where [ItemCharacteristic].[category] point to this entity (FK__ItemChara__categ__4AB81AF0)
        /// </summary>
        public virtual ICollection<ItemCharacteristic> ItemCharacteristics { get; set; } // ItemCharacteristic.FK__ItemChara__categ__4AB81AF0

        public Category()
        {
            ItemCharacteristics = new List<ItemCharacteristic>();
        }
    }

    // Ethnicities
    public class Ethnicity
    {
        public int Id { get; set; } // id (Primary key)
        public string Ethnicity_ { get; set; } // ethnicity

        // Reverse navigation

        /// <summary>
        /// Child Users where [user].[ethnicity] point to this entity (FK__user__ethnicity__03F0984C)
        /// </summary>
        public virtual ICollection<User> Users { get; set; } // user.FK__user__ethnicity__03F0984C

        public Ethnicity()
        {
            Users = new List<User>();
        }
    }

    // Genders
    public class Gender
    {
        public int Id { get; set; } // id (Primary key)
        public string Gender_ { get; set; } // gender (length: 10)

        // Reverse navigation

        /// <summary>
        /// Child Users where [user].[sex] point to this entity (FK__user__sex__75A278F5)
        /// </summary>
        public virtual ICollection<User> Users { get; set; } // user.FK__user__sex__75A278F5

        public Gender()
        {
            Users = new List<User>();
        }
    }

    // Items
    public class Item
    {
        public int Id { get; set; } // id (Primary key)
        public string PictureLocation { get; set; } // pictureLocation
        public double? Price { get; set; } // price
        public int? Quantity { get; set; } // quantity
        public string Supplier { get; set; } // supplier
        public int? CharacteristicFk { get; set; } // characteristic_fk
        public string Name { get; set; } // name

        // Foreign keys

        /// <summary>
        /// Parent ItemCharacteristic pointed by [Items].([CharacteristicFk]) (FK__Items__character__38996AB5)
        /// </summary>
        public virtual ItemCharacteristic ItemCharacteristic { get; set; } // FK__Items__character__38996AB5
    }

    // ItemCharacteristic
    public class ItemCharacteristic
    {
        public int Id { get; set; } // id (Primary key)
        public string Color { get; set; } // color (length: 128)
        public string Width { get; set; } // width
        public string Height { get; set; } // height
        public string Description { get; set; } // description
        public string Notes { get; set; } // notes
        public int? Category { get; set; } // category

        // Reverse navigation

        /// <summary>
        /// Child Items where [Items].[characteristic_fk] point to this entity (FK__Items__character__38996AB5)
        /// </summary>
        public virtual ICollection<Item> Items { get; set; } // Items.FK__Items__character__38996AB5

        // Foreign keys

        /// <summary>
        /// Parent Category pointed by [ItemCharacteristic].([Category]) (FK__ItemChara__categ__4AB81AF0)
        /// </summary>
        public virtual Category Category_Category { get; set; } // FK__ItemChara__categ__4AB81AF0

        public ItemCharacteristic()
        {
            Items = new List<Item>();
        }
    }

    // Permissions
    public class Permission
    {
        public int Id { get; set; } // id (Primary key)
        public string Permission_ { get; set; } // permission

        // Reverse navigation

        /// <summary>
        /// Child Roles where [Roles].[permissions_fk] point to this entity (FK__Roles__permissio__73BA3083)
        /// </summary>
        public virtual ICollection<Role> Roles { get; set; } // Roles.FK__Roles__permissio__73BA3083

        public Permission()
        {
            Roles = new List<Role>();
        }
    }

    // Roles
    public class Role
    {
        public int Id { get; set; } // id (Primary key)
        public string RoleName { get; set; } // role_name
        public int PermissionsFk { get; set; } // permissions_fk

        // Reverse navigation

        /// <summary>
        /// Child Users where [user].[Role] point to this entity (FK__user__Role__74AE54BC)
        /// </summary>
        public virtual ICollection<User> Users { get; set; } // user.FK__user__Role__74AE54BC

        // Foreign keys

        /// <summary>
        /// Parent Permission pointed by [Roles].([PermissionsFk]) (FK__Roles__permissio__73BA3083)
        /// </summary>
        public virtual Permission Permission { get; set; } // FK__Roles__permissio__73BA3083

        public Role()
        {
            Users = new List<User>();
        }
    }

    // user
    public class User
    {
        public string FirstName { get; set; } // firstName
        public string LastName { get; set; } // lastName
        public string Email { get; set; } // email
        public string LastLogin { get; set; } // lastLogin
        public string Password { get; set; } // password
        public string Address { get; set; } // address
        public int Id { get; set; } // id (Primary key)
        public int Age { get; set; } // age
        public string EmailVerified { get; set; } // emailVerified (length: 5)
        public int? Role { get; set; } // Role
        public int? Sex { get; set; } // sex
        public int? Ethnicity { get; set; } // ethnicity

        // Foreign keys

        /// <summary>
        /// Parent Ethnicity pointed by [user].([Ethnicity]) (FK__user__ethnicity__03F0984C)
        /// </summary>
        public virtual Ethnicity Ethnicity_Ethnicity { get; set; } // FK__user__ethnicity__03F0984C

        /// <summary>
        /// Parent Gender pointed by [user].([Sex]) (FK__user__sex__75A278F5)
        /// </summary>
        public virtual Gender Gender { get; set; } // FK__user__sex__75A278F5

        /// <summary>
        /// Parent Role pointed by [user].([Role]) (FK__user__Role__74AE54BC)
        /// </summary>
        public virtual Role Role_Role { get; set; } // FK__user__Role__74AE54BC
    }


    #endregion

    #region POCO Configuration

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // Categories
    public class CategoryConfiguration : IEntityTypeConfiguration<Category>
    {
        public void Configure(EntityTypeBuilder<Category> builder)
        {
            builder.ToTable("Categories", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__Categori__3213E83FE80FE8E2").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Name).HasColumnName(@"name").HasColumnType("varchar(128)").IsRequired(false).IsUnicode(false).HasMaxLength(128);
        }
    }

    // Ethnicities
    public class EthnicityConfiguration : IEntityTypeConfiguration<Ethnicity>
    {
        public void Configure(EntityTypeBuilder<Ethnicity> builder)
        {
            builder.ToTable("Ethnicities", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__Ethnicit__3213E83F1176D8AD").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Ethnicity_).HasColumnName(@"ethnicity").HasColumnType("varchar(max)").IsRequired(false).IsUnicode(false);
        }
    }

    // Genders
    public class GenderConfiguration : IEntityTypeConfiguration<Gender>
    {
        public void Configure(EntityTypeBuilder<Gender> builder)
        {
            builder.ToTable("Genders", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_Genders").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Gender_).HasColumnName(@"gender").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
        }
    }

    // Items
    public class ItemConfiguration : IEntityTypeConfiguration<Item>
    {
        public void Configure(EntityTypeBuilder<Item> builder)
        {
            builder.ToTable("Items", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__Items__3213E83F5CCDD992").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.PictureLocation).HasColumnName(@"pictureLocation").HasColumnType("varchar(max)").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.Price).HasColumnName(@"price").HasColumnType("float").HasPrecision(53).IsRequired(false);
            builder.Property(x => x.Quantity).HasColumnName(@"quantity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Supplier).HasColumnName(@"supplier").HasColumnType("varchar(max)").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.CharacteristicFk).HasColumnName(@"characteristic_fk").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Name).HasColumnName(@"name").HasColumnType("varchar(max)").IsRequired(false).IsUnicode(false);

            // Foreign keys
            builder.HasOne(a => a.ItemCharacteristic).WithMany(b => b.Items).HasForeignKey(c => c.CharacteristicFk).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Items__character__38996AB5");
        }
    }

    // ItemCharacteristic
    public class ItemCharacteristicConfiguration : IEntityTypeConfiguration<ItemCharacteristic>
    {
        public void Configure(EntityTypeBuilder<ItemCharacteristic> builder)
        {
            builder.ToTable("ItemCharacteristic", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__ItemChar__3213E83FF08975EF").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Color).HasColumnName(@"color").HasColumnType("varchar(128)").IsRequired(false).IsUnicode(false).HasMaxLength(128);
            builder.Property(x => x.Width).HasColumnName(@"width").HasColumnType("varchar(max)").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.Height).HasColumnName(@"height").HasColumnType("varchar(max)").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.Description).HasColumnName(@"description").HasColumnType("varchar(max)").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.Notes).HasColumnName(@"notes").HasColumnType("varchar(max)").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.Category).HasColumnName(@"category").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Category_Category).WithMany(b => b.ItemCharacteristics).HasForeignKey(c => c.Category).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__ItemChara__categ__4AB81AF0");
        }
    }

    // Permissions
    public class PermissionConfiguration : IEntityTypeConfiguration<Permission>
    {
        public void Configure(EntityTypeBuilder<Permission> builder)
        {
            builder.ToTable("Permissions", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__Permissi__3213E83F86B42870").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Permission_).HasColumnName(@"permission").HasColumnType("varchar(max)").IsRequired(false).IsUnicode(false);
        }
    }

    // Roles
    public class RoleConfiguration : IEntityTypeConfiguration<Role>
    {
        public void Configure(EntityTypeBuilder<Role> builder)
        {
            builder.ToTable("Roles", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__Roles__3213E83FC6D6B0E6").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.RoleName).HasColumnName(@"role_name").HasColumnType("varchar(max)").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.PermissionsFk).HasColumnName(@"permissions_fk").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Permission).WithMany(b => b.Roles).HasForeignKey(c => c.PermissionsFk).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Roles__permissio__73BA3083");
        }
    }

    // user
    public class UserConfiguration : IEntityTypeConfiguration<User>
    {
        public void Configure(EntityTypeBuilder<User> builder)
        {
            builder.ToTable("user", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_user").IsClustered();

            builder.Property(x => x.FirstName).HasColumnName(@"firstName").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.LastName).HasColumnName(@"lastName").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.Email).HasColumnName(@"email").HasColumnType("nvarchar(max)").IsRequired();
            builder.Property(x => x.LastLogin).HasColumnName(@"lastLogin").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.Password).HasColumnName(@"password").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.Address).HasColumnName(@"address").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Age).HasColumnName(@"age").HasColumnType("int").IsRequired();
            builder.Property(x => x.EmailVerified).HasColumnName(@"emailVerified").HasColumnType("varchar(5)").IsRequired(false).IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.Role).HasColumnName(@"Role").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Sex).HasColumnName(@"sex").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Ethnicity).HasColumnName(@"ethnicity").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Ethnicity_Ethnicity).WithMany(b => b.Users).HasForeignKey(c => c.Ethnicity).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__user__ethnicity__03F0984C");
            builder.HasOne(a => a.Gender).WithMany(b => b.Users).HasForeignKey(c => c.Sex).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__user__sex__75A278F5");
            builder.HasOne(a => a.Role_Role).WithMany(b => b.Users).HasForeignKey(c => c.Role).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__user__Role__74AE54BC");
        }
    }


    #endregion

    #region Stored procedure return models

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class OsSpGetItemsReturnModel
    {
        public int id { get; set; }
        public string name { get; set; }
        public string pictureLocation { get; set; }
        public double? price { get; set; }
        public int? quantity { get; set; }
        public string supplier { get; set; }
        public string width { get; set; }
        public string height { get; set; }
        public string category { get; set; }
        public string color { get; set; }
        public string description { get; set; }
        public string notes { get; set; }
    }

    public class OsSpGetUserReturnModel
    {
        public string firstName { get; set; }
        public string lastName { get; set; }
        public string email { get; set; }
        public string lastLogin { get; set; }
        public string password { get; set; }
        public string address { get; set; }
        public int id { get; set; }
        public int age { get; set; }
        public string emailVerified { get; set; }
        public int? Role { get; set; }
        public int? sex { get; set; }
        public int? ethnicity { get; set; }
    }


    #endregion

}
// </auto-generated>
